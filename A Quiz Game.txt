// App.js
import React, { useState, useEffect } from "react";
import "./App.css";

const questions = [
  { question: "Capital of France?", answer: "Paris" },
  { question: "Capital of Germany?", answer: "Berlin" },
  { question: "Capital of Italy?", answer: "Rome" },
  { question: "Capital of Spain?", answer: "Madrid" },
  { question: "Capital of USA?", answer: "Washington" },
  { question: "Capital of Japan?", answer: "Tokyo" },
  { question: "Capital of Canada?", answer: "Ottawa" },
  { question: "Capital of Australia?", answer: "Canberra" },
  { question: "Capital of India?", answer: "New Delhi" },
  { question: "Capital of Brazil?", answer: "Brasilia" },
];

function App() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userAnswer, setUserAnswer] = useState("");
  const [feedback, setFeedback] = useState("");
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(30);
  const [totalTime, setTotalTime] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev === 0) {
          handleSubmit(); // auto-submit when time is up
          return 30; // reset timer
        }
        return prev - 1;
      });
      setTotalTime((prev) => prev + 1);
    }, 1000);

    return () => clearInterval(timer);
  }, [currentIndex]); // reset timer on question change

  const handleNext = () => {
    setCurrentIndex((prev) => Math.min(prev + 1, questions.length - 1));
    resetQuestion();
  };

  const handlePrevious = () => {
    setCurrentIndex((prev) => Math.max(prev - 1, 0));
    resetQuestion();
  };

  const handleSubmit = () => {
    if (userAnswer.trim().toLowerCase() === questions[currentIndex].answer.toLowerCase()) {
      setFeedback("Correct!");
      setScore((prev) => prev + 10);
    } else {
      setFeedback("Incorrect!");
    }
  };

  const resetQuestion = () => {
    setUserAnswer("");
    setFeedback("");
    setTimeLeft(30);
  };

  return (
    <div className="quiz-container">
      <div className="card">
        <h2>Question {currentIndex + 1}</h2>
        <p>{questions[currentIndex].question}</p>
        <input
          type="text"
          value={userAnswer}
          onChange={(e) => setUserAnswer(e.target.value)}
          placeholder="Type your answer"
        />
        <div className="buttons">
          <button onClick={handlePrevious} disabled={currentIndex === 0}>Previous</button>
          <button onClick={handleSubmit}>Submit</button>
          <button onClick={handleNext} disabled={currentIndex === questions.length - 1}>Next</button>
        </div>
        {feedback && (
          <p className={feedback === "Correct!" ? "correct" : "incorrect"}>{feedback}</p>
        )}
        <p>Score: {score}</p>
        <p>Time Left: {timeLeft}s</p>
      </div>
      <p>Total Time: {totalTime}s</p>
    </div>
  );
}

export default App;



/* App.css */
.quiz-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
  font-family: Arial, sans-serif;
}

.card {
  border: 2px solid #ccc;
  border-radius: 8px;
  padding: 20px;
  width: 400px;
  text-align: center;
  box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
}

input {
  width: 80%;
  padding: 8px;
  margin: 10px 0;
  font-size: 16px;
}

.buttons button {
  margin: 5px;
  padding: 8px 12px;
  font-size: 16px;
}

.correct {
  color: green;
  font-weight: bold;
}

.incorrect {
  color: red;
  font-weight: bold;
}